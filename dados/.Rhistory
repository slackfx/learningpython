install.packages("neuralnet", dependencies=T)
library(neuralnet)
myiris = iris
myiris = cbind(myiris, myiris$Species=='setosa')
head(myiris)
tail(myiris)
myiris = cbind(myiris, myiris$Species=='versicolor')
myiris = cbind(myiris, myiris$Species=='virginica')
View(myiris)
View(myiris)
names(myiris)[6] = 'setosa'
names(myiris)[7] = 'versicolor'
names(myiris)[8] = 'virginica'
summary(virginica)
summary(myiris)
amostra = sample(2,150,replace=T,prob=c(0.7,0.3))
treino = myiris[amostra==1,]
teste = myiris[amostra==2,]
modelo = neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, treino, hidden=c(5,4))
View(modelo)
plot(modelo)
testenet = compute(modelo,teste[,1:4])
View(testenet)
testenet$net.result
resultado = as.data.frame(testenet$net.result)
names(resultado)[1] = 'setosa'
names(resultado)[2] = 'versicolor'
names(resultado)[3] = 'virginica'
View(resultado)
resultado$class = colnames(resultado[,1:3])[max.col(resultado[,1:3], ties.method = 'first')]
resultado
confusao = table(resultado$class, teste$Species)
sum(diag(confusao) + 100 / sum(confusao))
confusao
13+13+12+1
confusao
sum(diag(confusao) * 100 / sum(confusao))
digitos = read_csv(gzfile(file.choose()), header=F)
digitos = read.csv(gzfile(file.choose()), header=F)
dim(digitos)
head(digitos)
split.screen(figs=c(2,2))
dig = t(matrix(unlist(digitos[20, -785],nrow=28,byrow=F)))
dig = t(matrix(unlist(digitos[20, -785]), nrow=28, byrow=F))
View(dig)
dig = t(apply(dig, 2, rev))
View(dig)
screen(1)
image(dig, col=grey.colors(255))
digitos[20, 785]
screen(2)
dig = t(matrix(unlist(digitos[2, -785]), nrow=28, byrow=F))
dig = t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
screen(3)
dig = t(matrix(unlist(digitos[4, -785]), nrow=28, byrow=F))
dig = t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
screen(4)
dig = t(matrix(unlist(digitos[5, -785]), nrow=28, byrow=F))
dig = t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
close.screen(all=T)
dig = t(matrix(unlist(digitos[5, -785]), nrow=28, byrow=F))
dig = t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
install.packages("h2o")
library(h2o)
??h2o
h2o.init()
treino = h2o.importFile(file.choose())
teste = h2o.importFile(file.choose())
treino[,785] = as.factor(treino[,785])
teste[,785] = as.factor(teste[,785])
View(teste)
modelo = h2o.deeplearning(x = colnames(treino[,1:784]),
y = "C785",
training_frame = treino,
validation_frame=teste,
distribution = "AUTO",
activation = "RectifierWithDropout",
hidden=c(64,64,64),
sparse = TRUE,
epochs = 20)
treino[,785]
modelo <- h2o.deeplearning(x = colnames(treino[,1:784]),  y = "C785",  training_frame = treino,  validation_frame = teste,  distribution = "AUTO",  activation = "RectifierWithDropout",  hidden = c(64,64,64),  sparse = TRUE, epochs = 20)
plot(modelo)
treino = h2o.importFile(file.choose())
teste = h2o.importFile(file.choose())
treino[,785]
treino[,785] = as.factor(treino[,785])
teste[,785] = as.factor(teste[,785])
treino[,785]
View(teste)
modelo <- h2o.deeplearning(x = colnames(treino[,1:784]),
y = "C785",
training_frame = treino,
validation_frame = teste,
distribution = "AUTO",
activation = "RectifierWithDropout",
hidden = c(64,64,64),
sparse = TRUE,
epochs = 20)
plot(modelo)
h2o.performance(modelo)
modelo <- h2o.deeplearning(x = colnames(treino[,1:784]),
y = "C785",
training_frame = treino,
validation_frame = teste,
distribution = "AUTO",
activation = "RectifierWithDropout",
hidden = c(64,64,64),
sparse = TRUE,
epochs = 20,
ignore_const_cols = FALSE)
plot(modelo)
h2o.performance(modelo)
modelo <- h2o.deeplearning(x = colnames(treino[,1:784]),
y = "C785",
training_frame = treino,
validation_frame = teste,
distribution = "AUTO",
activation = "RectifierWithDropout",
hidden = c(64,64,64),
sparse = TRUE,
epochs = 20,
ignore_const_cols = TRUE)
h2o.performance(modelo)
pred = h2o.predict(modelo, newdata=treino[20,1:784])
pred
View(pred)
pred$predict
install.packages("igraph", dependencies = T)
grafo1 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo1)
#install.packages("igraph", dependencies = T)
library(igraph)
grafo1 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo1)
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1,1,3,4,3,3,2,2,1))
plot(grafo2)
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1,1,4,4,3,3,2,2,1))
plot(grafo2)
grafo1 = graph(edges=c(1,2,2,3,3,4,4,1,1,1))
plot(grafo1)
grafo3 = graph_from_literal(1-+2, 2-+3, 3++4, 4-+1)
plot(grafo3)
grafo4 = graph_from_literal(1-2, 2-3, 3-4, 4-1)
plot(grafo4)
grafo4 = graph_from_literal(1-2, 2-3, 3-4, 4-1, 5)
plot(grafo4)
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1,))
plot(grafo2)
grafo2
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1,))
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo2)
grafo2
plot(graph(edges=c(1, 2, 3, 4)))
plot(graph(edges=c(1,2,2,3,3,4,4,1), directed = F))
grafo3 = graph(edges=c(1,2,2,3,3,4,4,1), directed = F)
plot(grafo3)
grafo3
grafo4 = graph(edges=c(1,2,2,3,3,4,4,1), directed = F, n = 10)
plot(grafo4)
grafo4
grafo4 = graph(edges=c(1,2,2,3,3,4,4,1,1,5), directed = F, n = 10)
plot(grafo4)
grafo4 = graph(edges=c(1,2,2,3,3,4,4,1), directed = F, n = 10)
plot(grafo4)
grafo4
grafo5 =  graph(edges=c("A", "B", "B", "C", "C", "D", "D", "E", "E", "A", "A", "C", "C", "B"), isolates = c("F", "G"))
plot(grafo5)
grafo5
grafo5 =  graph(edges=c("A", "B", "B", "C", "C", "D", "D", "E", "E", "A", "A", "C", "C", "B"), isolates = c("F", "G"))
plot(grafo5)
grafo5[]
grafo5[1,] # primeira coluna inteira
grafo5[,1] # primeira coluna inteira
grafo5[1, 1]
V(grafo5)$name
# busca informacoes do vertice
V(grafo5)
E(grafo5)
grafo7 = graph(edges=c("Fernando", "Pedro", "JosÃ©", "Antonio", "Fernando", "jose", "Fernando", "Antonio"))
plot(grafo7)
grafo7 = graph(edges=c("Fernando", "Pedro", "Jose", "Antonio", "Fernando", "jose", "Fernando", "Antonio"))
plot(grafo7)
V(grafo7)$Peso = c(40, 30, 30, 25) # Cria o atributo Peso em V (o atributo nao existe na api)
grafo7 = graph(edges=c("Fernando", "Pedro", "Jose", "Antonio", "Fernando", "jose", "Fernando", "Antonio"))
plot(grafo7)
V(grafo7)$Peso = c(40, 30, 30, 25) # Cria o atributo Peso em V (o atributo nao existe na api)
grafo7 = graph(edges=c("Fernando", "Pedro", "Jose", "Antonio", "Fernando", "Jose", "Fernando", "Antonio"))
plot(grafo7)
V(grafo7)$Peso = c(40, 30, 30, 25) # Cria o atributo Peso em V (o atributo nao existe na api)
vertex_attr(grafo7)
E(grafo7)$TipoAmizade = c("Amigo", "Inimigo", "Inimigo", "Amigo")
edge_attr(grafo7)
vertex_attr(grafo7)$Peso
E(grafo7)$weight = c(1, 2, 1, 3)
grafo7
grafo7 # DNW- -> Direcional. Nomeado e com pesos
grafo7 # DNW- -> Direcional. Nomeado e com pesos
grafo7 # DNW- -> Direcional. Nomeado e com pesos
V(grafo7)$type = "Humanos"
grafo7 # DNW- -> Direcional. Nomeado e com pesos
grafo7 # DNWB -> Direcional. Nomeado, com pesos e com tipo
plot(grafo7)
